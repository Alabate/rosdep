#!/usr/bin/env python

from __future__ import print_function

import argparse
import os
import sys

from rosinstall_generator.distro import generate_rosinstall
from rosinstall_generator.old_distro import generate_dry_rosinstall

import logging
logger = logging.getLogger('submit_jobs')


def main(argv=sys.argv[1:]):
    distro = os.environ['ROS_DISTRO'] if 'ROS_DISTRO' in os.environ else None
    parser = argparse.ArgumentParser(
        description='Creates a new catkin package')
    parser.add_argument('pkgname', help='The wet pkgname or dry stackname')
    parser.add_argument('distro', nargs='?' if distro else 1, default=distro, help='The ROS distro (default: environment variable ROS_DISTRO if defined)')
    parser.add_argument('--deps', action='store_true', default=False,
        help='Include recursive dependencies')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--wet-only', action='store_true', default=False,
        help='Only include wet packages')
    group.add_argument('--dry-only', action='store_true', default=False,
        help='Only include dry stacks')
    parser.add_argument('--tar', action='store_true', default=False,
        help='Use tarballs instead of repositories for wet packages (dry packages are always tarballs)')
    args = parser.parse_args(argv)

    if not args.tar:
        raise NotImplementedError()

    if args.wet_only and args.dry_only:
        raise RuntimeError('Invalid combination')

    if args.wet_only:
        print('Calling wet', file=sys.stderr)
        rosinstall = generate_rosinstall(args.distro, args.pkgname)
    elif args.dry_only:
        print('Calling dry', file=sys.stderr)
        rosinstall = generate_dry_rosinstall(args.distro, args.pkgname)
    else:
        print('Calling combined', file=sys.stderr)
        dry_rs = generate_dry_rosinstall(args.distro, args.pkgname)
        wet_rs = generate_rosinstall(args.distro, args.pkgname)
        rosinstall = wet_rs + dry_rs

    print(rosinstall)


if __name__ == '__main__':
    main()
